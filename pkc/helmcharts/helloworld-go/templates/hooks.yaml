{{- range .Values.hookjobs }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $.Release.Name }}-{{ .name }}-sa
  namespace: "{{$.Release.Namespace}}"
  labels:
    heritage: {{ $.Release.Service }}
    release: {{ $.Release.Name }}
  annotations:
    "helm.sh/hook": {{ .name }}
    "helm.sh/hook-weight": "-15"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: "{{$.Release.Namespace}}"
  name: {{ $.Release.Name }}-{{ .name }}-role
  labels:
    release: {{ $.Release.Name }}
  annotations:
    "helm.sh/hook": {{ .name }}
    "helm.sh/hook-weight": "-14"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $.Release.Name }}-{{ .name }}-rb
  namespace: "{{$.Release.Namespace}}"
  labels:
    release: {{ $.Release.Name }}
  annotations:
    "helm.sh/hook": {{ .name }}
    "helm.sh/hook-weight": "-13"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
subjects:
  - kind: ServiceAccount
    name: {{ $.Release.Name }}-{{ .name }}-sa
    namespace: "{{$.Release.Namespace}}"
    apiGroup: ""
roleRef:
  kind: Role
  name: {{ $.Release.Name }}-{{ .name }}-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" $ }}-{{ .name }}-job
  labels:
    app: {{ $.Release.Name }}-{{ template "name" $ }}
    heritage: {{ $.Release.Service | quote }}
    release: {{ $.Release.Name | quote }}
    chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": {{ .name }}
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
spec:
    template:
      spec:
        serviceAccountName: {{ $.Release.Name }}-{{ .name }}-sa
        securityContext:
{{ toYaml $.Values.securityContext | indent 10 }}
        containers:
        - name: "{{ .name }}-hook-job"
          image: "{{ $.Values.global.registry }}/{{ $.Values.hookJobsImage.repository }}:{{ $.Values.hookJobsImage.tag }}"
          imagePullPolicy: {{ $.Values.hookJobsImage.pullPolicy }}
{{- if $.Values.containerSecurityContext }}
          securityContext:
{{ toYaml $.Values.containerSecurityContext | indent 10 }}
{{- end }}
          command:
          - sh
          - -c
          - |
            echo 'Hook {{ .name }} for release: {{ $.Release.Name }}. Waiting for {{ .sleeptimeout }} seconds...'
            sleep {{ .sleeptimeout }}
            echo 'Looking for configmap: {{ $.Release.Name }}-test-config and key {{ .name }}-fail ...'
            kubectl get configmap {{ $.Release.Name }}-test-config -n {{ $.Release.Namespace }}
            if [ $? -ne 0 ];then
                echo "Config map does not exist or hook not configured."
                break
            else
                isFail=$(kubectl get configmap {{ $.Release.Name }}-test-config -n {{ $.Release.Namespace }} -o jsonpath='{.data.{{ .name }}-fail}')
                echo "Configuration: {{ .name }}-fail=$isFail"
                if [ "$isFail" = "true" ]; then
                  echo "Hook configured to fail! Exit with code 1!"
                  exit 1
                fi
            fi
          resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 10Mi
        restartPolicy: {{ $.Values.hookJobsImage.restartPolicy }}
    backoffLimit: {{ default 0 .backoffLimit }}
{{- end }}

